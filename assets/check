#! /usr/bin/env node
'use strict';

const readline = require('readline');
const req = require('sync-request');
const _ = require('lodash');

const read = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

let output;

read.on('line', (input) => {
  console.error(input); // TESTING
  console.error('args:', process.argv); // TESTING
  console.error('env:', process.env); // TESTING

  const payload = JSON.parse(input);
  const api = 'https://bitbucket.org/api/2.0';

  // INFO(mperrotte): source values
  const username = payload.source.username;
  const password = payload.source.password;
  const project = payload.source.project;
  const repo = payload.source.repository;
  const branch = payload.source.branch;

  const previousVersion = payload.version;

  const auth = Buffer.from(`${username}:${password}`).toString('base64');
  const query = `q=state%3D%22open%22%20and%20destination.branch.name%3D%22${branch}%22&sort=-updated_on`;
  const res = req(
    'GET',
    `${api}/repositories/${project}/${repo}/pullrequests?${query}`,
    {
      headers: {
        Authorization: `Basic ${auth}`
      }
    }
  );
  const data = JSON.parse(res.getBody());
  console.error(data);

  const prData = data.values.map(pr => {
    const id = pr.id;
    const branch = pr.source.branch.name;
    const commit = pr.source.commit.hash;
    const res = req(
      'GET',
      `${api}/repositories/${project}/${repo}/commit/${commit}`, {
        headers: {
          Authorization: `Basic ${auth}`
        }
      }
    );
    const commitData = JSON.parse(res.getBody());
    const date = commitData.date;
    return {
      id: id.toString(),
      commit,
      branch,
      updated_on: new Date(date).getTime().toString()
    };
  });
  console.error(prData);

  if (previousVersion) {
    // NOTE(mperrotte): `previousVersion` exists, so just update what has changed
    const versions = prData.filter(pr => pr.updated_on >= previousVersion.updated_on);
    console.error(versions);
    output = versions;
  } else {
    // NOTE(mperrotte): no previous version, return everything
    output = prData;
  }
  // output = [ _.first(prData) ];
  console.error(output);
  read.close();
});

read.on('close', () => {
  console.log(JSON.stringify(output));
  process.exit(0);
});
